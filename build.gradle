Properties props = new Properties()
props.load(new FileInputStream("./src/main/resources/database.properties"))


buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("com.google.code.gson:gson:2.2.4")
	compile("commons-lang:commons-lang:2.6")
	compile("org.mybatis:mybatis:3.4.1")

	runtime('mysql:mysql-connector-java')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('junit:junit:4.11')
	testCompile('org.mockito:mockito-core:1.9.5')
}

task createCMSDB(type: Exec) {
	workingDir 'db/cms'
	commandLine './createmockcms.sh', "${props.getProperty("cmsDatabase")}", "${props.getProperty("jdbc.username")}", "${props.getProperty("jdbc.password")}"
}

task createDB(type: Exec) {
	workingDir 'db'
	commandLine './createbuild.sh', "${props.getProperty("buildDatabase")}", "${props.getProperty("jdbc.username")}", "${props.getProperty("jdbc.password")}"
}

task initDB(type: Exec) {
	workingDir 'db/migrations'
	commandLine './mybatis/bin/migrate', 'up'
}

initDB.dependsOn createDB
